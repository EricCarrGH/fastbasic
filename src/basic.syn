#
# FastBasic - Fast basic interpreter for the Atari 8-bit computers
# Copyright (C) 2017-2021 Daniel Serpell
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>
#

# Syntax in simplified PEG format
# -------------------------------

TOKENS {
 # First token must be "END"
 TOK_END
 # Constant and variable loading
 TOK_NUM, TOK_BYTE, TOK_CSTRING, TOK_VAR_ADDR, TOK_VAR_SADDR, TOK_VAR_LOAD
 TOK_SHL8, TOK_0, TOK_1
 # PUSH plus composed PUSH ops
 TOK_PUSH, TOK_PUSH_VAR_LOAD
 TOK_PUSH_NUM, TOK_PUSH_BYTE, TOK_PUSH_0, TOK_PUSH_1
 # Numeric operators
 TOK_NEG, TOK_ABS, TOK_SGN, TOK_ADD, TOK_SUB, TOK_MUL, TOK_DIV, TOK_MOD
 # Operators on VAR
 TOK_ADD_VAR,
 # Bitwise operators
 TOK_BIT_AND, TOK_BIT_OR, TOK_BIT_EXOR
 # Functions
 TOK_PEEK, TOK_DPEEK, TOK_BYTE_PEEK
 TOK_TIME, TOK_RAND
 # Boolean operators
 TOK_L_NOT, TOK_L_OR, TOK_L_AND
 # Comparisons
 TOK_LT, TOK_GT, TOK_NEQ, TOK_EQ
 # Convert from int to bool
 TOK_COMP_0
 # Low level statements
 TOK_POKE, TOK_DPOKE, TOK_MOVE, TOK_NMOVE, TOK_MSET, TOK_INC, TOK_DEC
 TOK_VAR_STORE, TOK_SADDR, TOK_INCVAR, TOK_DECVAR, TOK_BYTE_POKE
 TOK_NUM_POKE, TOK_VAR_STORE_0
 # Graphic support statements
 TOK_POSITION, TOK_GRAPHICS, TOK_DRAWTO
 # P/M statements
 TOK_PMGRAPHICS
 # Print statements
 TOK_PRINT_STR, TOK_PRINT_TAB
 # I/O
 TOK_GETKEY, TOK_INPUT_STR, TOK_XIO, TOK_CLOSE, TOK_GET, TOK_PUT
 TOK_BPUT, TOK_BGET
 # Set's IO channel (before PRINT/INPUT/PUT/GET)
 TOK_IOCHN
 # Jumps
 TOK_JUMP, TOK_CJUMP, TOK_CNJUMP, TOK_CALL, TOK_RET, TOK_CRET, TOK_CNRET
 # FOR loop support
 TOK_FOR, TOK_FOR_NEXT, TOK_FOR_EXIT
 # Arrays
 TOK_DIM, TOK_USHL
 # Strings
 TOK_COPY_STR, TOK_VAL, TOK_CMP_STR, TOK_INT_STR, TOK_STR_IDX, TOK_CAT_STR, TOK_CHR
 TOK_PAUSE
 # USR, calls ML routinr
 TOK_USR_ADDR, TOK_USR_PARAM, TOK_USR_CALL

#@if FASTBASIC_FP
 # Floating point computations
 TOK_INT_FP, TOK_FP_VAL, TOK_FP_SGN, TOK_FP_ABS, TOK_FP_NEG, TOK_FLOAT
 TOK_FP_DIV, TOK_FP_MUL, TOK_FP_SUB, TOK_FP_ADD, TOK_FP_STORE, TOK_FP_LOAD
 TOK_FP_EXP, TOK_FP_EXP10, TOK_FP_LOG, TOK_FP_LOG10, TOK_FP_INT, TOK_FP_CMP
 TOK_FP_IPOW, TOK_FP_RND, TOK_FP_SQRT, TOK_FP_SIN, TOK_FP_COS, TOK_FP_ATN
 TOK_FP_STR
 # Used for floating point array access
 TOK_MUL6
#@endif FASTBASIC_FP
}

EXTERN {
 E_REM, E_NUMBER_WORD, E_NUMBER_BYTE, E_EOL
 E_PUSH_LT, E_POP_LOOP, E_POP_REPEAT
 E_POP_IF, E_ELSEIF, E_EXIT_LOOP
 E_POP_WHILE, E_POP_FOR, E_POP_PROC_DATA, E_POP_PROC_2
 E_CONST_STRING
 E_VAR_CREATE, E_VAR_SET_TYPE, E_LABEL_SET_TYPE
 E_VAR_WORD, E_VAR_SEARCH
 E_LABEL, E_LABEL_DEF
 E_PUSH_VAR, E_POP_VAR

#@if EXTENDED
 E_DATA_FILE
#@endif

#@if FASTBASIC_FP
 E_NUMBER_FP
#@endif FASTBASIC_FP
}

# Floating point expressions
#@if FASTBASIC_FP
FP_EXPR:
        FP_T_EXPR FP_E_EXPR_MORE FP_M_EXPR_MORE FP_EXPR_MORE

FP_EXPR_MORE: '+', '-'
        "+" FP_T_EXPR FP_E_EXPR_MORE FP_M_EXPR_MORE emit TOK_FP_ADD FP_EXPR_MORE
        "-" FP_T_EXPR FP_E_EXPR_MORE FP_M_EXPR_MORE emit TOK_FP_SUB FP_EXPR_MORE
        pass

FP_M_EXPR_MORE: '*', '/'
        "*" FP_T_EXPR FP_E_EXPR_MORE emit TOK_FP_MUL FP_M_EXPR_MORE
        "/" FP_T_EXPR FP_E_EXPR_MORE emit TOK_FP_DIV FP_M_EXPR_MORE
        pass

FP_E_EXPR_MORE: '^'
        "^" T_EXPR emit TOK_FP_IPOW FP_E_EXPR_MORE
        "^" emit TOK_FP_LOG10 FP_T_EXPR emit { TOK_FP_MUL, TOK_FP_EXP10 } FP_E_EXPR_MORE
        pass

FP_T_EXPR: floating point constant, variable or function
        emit TOK_FLOAT E_NUMBER_FP
        "-" FP_T_EXPR emit TOK_FP_NEG
        "+" FP_T_EXPR
        # FP Functions
        "Abs"   FP_T_EXPR emit TOK_FP_ABS
        "ATn"   FP_T_EXPR emit TOK_FP_ATN
        "SGn"   FP_T_EXPR emit TOK_FP_SGN
        "EXp10" FP_T_EXPR emit TOK_FP_EXP10
        "EXP"   FP_T_EXPR emit TOK_FP_EXP
        "LOg10" FP_T_EXPR emit TOK_FP_LOG10
        "LOG"   FP_T_EXPR emit TOK_FP_LOG
        "SQr"   FP_T_EXPR emit TOK_FP_SQRT
        "SIn"   FP_T_EXPR emit TOK_FP_SIN
        "COs"   FP_T_EXPR emit TOK_FP_COS
        "Val"   STR_PAR_EXPR emit TOK_FP_VAL
        "RNd()" emit TOK_FP_RND
        "(" FP_EXPR ")"
        ARRAY_FLOAT_ADDR emit TOK_FP_LOAD
        emit { TOK_VAR_ADDR, VT_FLOAT } E_VAR_SEARCH "%" emit TOK_FP_LOAD
        T_EXPR_INTONLY emit TOK_INT_FP

#@endif FASTBASIC_FP

# Normal expressions
INT_EXPR: integer expression
        T_EXPR BIT_EXPR_MORE M_EXPR_MORE INT_EXPR_MORE

PUSH_T_EXPR:
        # Those produce about 1% faster code in the IDE for 12 extra bytes.
#        emit TOK_PUSH_BYTE E_NUMBER_BYTE
#        emit TOK_PUSH_NUM E_NUMBER_WORD
#        emit TOK_PUSH_VAR_LOAD E_VAR_WORD
        emit TOK_PUSH T_EXPR

INT_EXPR_MORE: '+', '-'
        "+" PUSH_T_EXPR BIT_EXPR_MORE M_EXPR_MORE emit TOK_ADD INT_EXPR_MORE
        "-" PUSH_T_EXPR BIT_EXPR_MORE M_EXPR_MORE emit TOK_SUB INT_EXPR_MORE
        pass

M_EXPR_MORE: '*', '/', 'MOD'
        "*"   PUSH_T_EXPR BIT_EXPR_MORE emit TOK_MUL M_EXPR_MORE
        "/"   PUSH_T_EXPR BIT_EXPR_MORE emit TOK_DIV M_EXPR_MORE
        "Mod" PUSH_T_EXPR BIT_EXPR_MORE emit TOK_MOD M_EXPR_MORE
        pass

BIT_EXPR_MORE: '&', '!', 'EXOR'
        "&"    PUSH_T_EXPR emit TOK_BIT_AND  BIT_EXPR_MORE
        "!"    PUSH_T_EXPR emit TOK_BIT_OR   BIT_EXPR_MORE
        "Exor" PUSH_T_EXPR emit TOK_BIT_EXOR BIT_EXPR_MORE
        pass

ADR_EXPR: string or variable
        STR_EXPR
        emit { TOK_VAR_LOAD, VT_ARRAY_WORD   } E_VAR_SEARCH
        emit { TOK_VAR_LOAD, VT_ARRAY_BYTE   } E_VAR_SEARCH
        emit { TOK_NUM, VT_ARRAY_WORD   } E_LABEL
        emit { TOK_NUM, VT_ARRAY_BYTE   } E_LABEL
        emit { TOK_VAR_LOAD, VT_ARRAY_STRING } E_VAR_SEARCH
#@if FASTBASIC_FP
        emit { TOK_VAR_LOAD, VT_ARRAY_FLOAT  } E_VAR_SEARCH "%"
#@endif FASTBASIC_FP

USR_EXPR_MORE:
        "," EXPR emit TOK_USR_PARAM USR_EXPR_MORE
        pass

T_EXPR: integer constant
        emit TOK_BYTE E_NUMBER_BYTE
        emit TOK_NUM E_NUMBER_WORD
        "-" T_EXPR emit TOK_NEG
        "+" T_EXPR
        PAR_EXPR
#@if FASTBASIC_FP
        # In the floating-point version the parsing of integer expressions is
        # separated to avoid exponential growth when parsing parenthesis
        # expressions.
        T_EXPR_INTONLY

        # This is an integer terminal that can't be parsed as a floating point:
T_EXPR_INTONLY: integer variable or function
#@endif FASTBASIC_FP
        "Not" NOT_EXPR emit TOK_L_NOT
        # Special (predefined) variables
        "Time"   emit TOK_TIME
        # Variables as R-Values, push value into stack
        ARRAY_WORD_ADDR emit TOK_DPEEK
        ARRAY_BYTE_ADDR emit TOK_PEEK
        # Functions without parameters
        "Fre()"  emit { TOK_NUM, &MEMTOP, TOK_DPEEK, TOK_PUSH_BYTE, BASIC_TOP, TOK_DPEEK, TOK_SUB }
        "Err()"  emit { TOK_BYTE_PEEK, IOERROR }
        "Key()"  emit { TOK_NUM, &CH, TOK_PEEK, TOK_PUSH_BYTE, 255, TOK_BIT_EXOR }
        # Variables
        emit TOK_VAR_LOAD E_VAR_WORD
        # Functions with parameters
        "Abs"    T_EXPR emit TOK_ABS
        "SGn"    T_EXPR emit TOK_SGN
        "Peek"   T_EXPR emit TOK_PEEK
        "PAddle" emit { TOK_NUM, &PADDL0, TOK_PUSH_BYTE, 7 } RD_PORT
        "PTrig"  emit { TOK_NUM, &PTRIG0, TOK_PUSH_BYTE, 7 } RD_PORT
        "Stick"  emit { TOK_NUM, &STICK0, TOK_PUSH_BYTE, 3 } RD_PORT
        "STRig"  emit { TOK_NUM, &STRIG0, TOK_PUSH_BYTE, 3 } RD_PORT
        "PMadr"  T_EXPR emit { TOK_PUSH_BYTE, 4, TOK_ADD, TOK_PUSH_NUM, &PMGMODE, \
                                 TOK_PEEK, TOK_USHL, TOK_MUL, TOK_PUSH_NUM, &PMGBASE, \
                                 TOK_PEEK, TOK_SHL8, TOK_ADD }
#@if FASTBASIC_FP
        "Int"    FP_T_EXPR emit TOK_FP_INT
#@endif FASTBASIC_FP
        "Rand"   T_EXPR emit TOK_RAND
        "Dpeek"  T_EXPR emit TOK_DPEEK
        "USR("   EXPR emit TOK_USR_ADDR USR_EXPR_MORE ")" emit TOK_USR_CALL
        "ADR("   ADR_EXPR ")"
        "&"      ADR_EXPR
        "Len"    STR_PAR_EXPR emit TOK_PEEK # First byte of string is the length
        "Val"    STR_PAR_EXPR emit TOK_VAL
        "ASc"    STR_PAR_EXPR emit { TOK_PUSH_1, TOK_ADD, TOK_PEEK } # TODO: does not check for empty strings.

# Used to handle PADDLE/STICK/PTRIG/STRIG
RD_PORT:
        emit TOK_PUSH T_EXPR emit { TOK_BIT_AND, TOK_ADD, TOK_PEEK }

PAR_EXPR: left parenthesis
        "(" EXPR ")"

STR_PAR_EXPR: left parenthesis
        "(" STR_EXPR ")"

# Parses a continuation of an INT to BOOLean expression
OR_AND_BOOL:
        OR_EXPR_RIGHT
        AND_EXPR_RIGHT

# Test if an INT needs to be converted to BOOL
TEST_BOOL_EXPR:
        emit TOK_COMP_0 OR_AND_BOOL
        emit TOK_PUSH COMP_EXPR_RIGHT OR_EXPR_MORE AND_EXPR_MORE COMP_EXPR_MORE
#@if FASTBASIC_FP
        emit TOK_INT_FP COMP_FP_RIGHT  OR_EXPR_MORE AND_EXPR_MORE COMP_EXPR_MORE
#@endif FASTBASIC_FP
        pass

# General Expression - Can be INT or BOOL
EXPR:
        INT_EXPR TEST_BOOL_EXPR
        STR_EXPR COMP_STR_RIGHT
#@if FASTBASIC_FP
        FP_EXPR COMP_FP_RIGHT
#@endif FASTBASIC_FP

# Forced BOOL expressions, convert to BOOL always
FORCE_BOOL_EXPR:
        NOT_EXPR AND_EXPR_MORE OR_EXPR_MORE

OR_EXPR_RIGHT: 'OR'
        "Or" emit TOK_PUSH NOT_EXPR AND_EXPR_MORE emit TOK_L_OR OR_EXPR_MORE

OR_EXPR_MORE:
        OR_EXPR_RIGHT
        pass

AND_EXPR_RIGHT: 'AND'
        "And" emit TOK_PUSH NOT_EXPR emit TOK_L_AND AND_EXPR_MORE

AND_EXPR_MORE:
        AND_EXPR_RIGHT
        pass

NOT_EXPR:
        "Not" NOT_EXPR emit TOK_L_NOT
        INT_EXPR COMP_OR_BOOL
#@if FASTBASIC_FP
        FP_EXPR COMP_FP_RIGHT
#@endif FASTBASIC_FP
        STR_EXPR COMP_STR_RIGHT

COMP_OR_BOOL:
        emit TOK_PUSH COMP_EXPR_RIGHT COMP_EXPR_MORE
#@if FASTBASIC_FP
        emit TOK_INT_FP COMP_FP_RIGHT COMP_EXPR_MORE
#@endif FASTBASIC_FP
        emit TOK_COMP_0

COMP_EXPR_RIGHT: integer comparison operator
        "<=" INT_EXPR emit { TOK_GT, TOK_L_NOT }
        ">=" INT_EXPR emit { TOK_LT, TOK_L_NOT }
        "<>" INT_EXPR emit TOK_NEQ
        "<"  INT_EXPR emit TOK_LT
        ">"  INT_EXPR emit TOK_GT
        "="  INT_EXPR emit TOK_EQ

#@if FASTBASIC_FP
# FP Comparisons:
COMP_FP_RIGHT: floating-point comparison operator
        "="  FP_EXPR emit { TOK_FP_CMP, TOK_EQ }
        ">"  FP_EXPR emit { TOK_FP_CMP, TOK_GT }
        ">=" FP_EXPR emit { TOK_FP_CMP, TOK_LT, TOK_L_NOT }
        "<>" FP_EXPR emit { TOK_FP_CMP, TOK_NEQ }
        "<=" FP_EXPR emit { TOK_FP_CMP, TOK_GT, TOK_L_NOT }
        "<"  FP_EXPR emit { TOK_FP_CMP, TOK_LT }
#@endif FASTBASIC_FP

# Push and string expression
PCMP_STR_EXPR:
        emit TOK_PUSH STR_EXPR emit TOK_CMP_STR

COMP_STR_RIGHT: comparison operator
        "="  PCMP_STR_EXPR emit TOK_EQ
        ">"  PCMP_STR_EXPR emit TOK_GT
        ">=" PCMP_STR_EXPR emit { TOK_LT, TOK_L_NOT }
        "<>" PCMP_STR_EXPR emit TOK_NEQ
        "<=" PCMP_STR_EXPR emit { TOK_GT, TOK_L_NOT }
        "<"  PCMP_STR_EXPR emit TOK_LT

COMP_EXPR_MORE:
        emit TOK_PUSH COMP_EXPR_RIGHT COMP_EXPR_MORE
        pass

# String expressions: base plus optional index
STR_EXPR: string expression
        STR_EXPR_BASE OPT_STR_INDEX

OPT_STR_INDEX:
        "[" emit TOK_PUSH EXPR C_EXPR "]" emit TOK_STR_IDX OPT_STR_INDEX
        "[" emit TOK_PUSH EXPR "]" emit { TOK_PUSH_BYTE, 255, TOK_STR_IDX } OPT_STR_INDEX
        pass

STR_EXPR_BASE:
        # Either, a constant string
        "\"" emit TOK_CSTRING E_CONST_STRING
        # Or a string function
        "CHR$" T_EXPR emit TOK_CHR
        "STR$" T_EXPR emit TOK_INT_STR
        # Convert pointer to string!
        "$" PAR_EXPR
#@if FASTBASIC_FP
        "STR$" FP_T_EXPR emit TOK_FP_STR
#@endif FASTBASIC_FP
        # Or a string variable
        emit { TOK_VAR_LOAD, VT_STRING } E_VAR_SEARCH "$"
        # Or a string array
        ARRAY_STRING_ADDR emit TOK_DPEEK

# Statements
PRINT_SEP:
        "," emit TOK_PRINT_TAB
        ";"
        E_EOL emit { TOK_BYTE, 155, TOK_PUT }

PRINT_ONE:
        EXPR emit { TOK_INT_STR, TOK_PRINT_STR } PRINT_SEP
#@if FASTBASIC_FP
        FP_EXPR emit { TOK_FP_STR, TOK_PRINT_STR } PRINT_SEP
#@endif FASTBASIC_FP
        STR_EXPR emit TOK_PRINT_STR PRINT_SEP
        "," emit TOK_PRINT_TAB
        ";"

PRINT_EXPR:
        IO_CHAN_OPT PRINT_SEP PRINT_MORE
        IO_CHAN_OPT PRINT_MORE

PRINT_MORE:
        PRINT_ONE PRINT_MORE
        IO_CHAN0

# Parse multi-line IF
THEN_OR_MULTILINE: 'THEN'
        "Then" PARSE_START E_POP_IF
        pass

VAR_CREATE_TYPE:
        "$" emit VT_STRING
#@if FASTBASIC_FP
        "%" emit VT_FLOAT
#@endif FASTBASIC_FP
        emit VT_WORD

# Parse variable as L-VALUE, stores the *address* in the stack, this creates the
# variable if not exist.
# NOTE: the creation rule (E_VAR_SET_TYPE) always fails, so the parser uses the next
#       rules using the created variable.
VAR_WORD_LVALUE_SADDR: variable name
        ARRAY_WORD_ADDR emit TOK_SADDR
        E_VAR_CREATE VAR_CREATE_TYPE E_VAR_SET_TYPE
        emit TOK_VAR_SADDR E_VAR_WORD

VAR_STR_LVALUE_SADDR: variable name
        emit { TOK_VAR_SADDR, VT_STRING } E_VAR_SEARCH "$"
        ARRAY_STRING_ADDR emit TOK_SADDR

VAR_WORD_SAVE: variable name
        E_VAR_CREATE VAR_CREATE_TYPE E_VAR_SET_TYPE
        E_VAR_WORD E_PUSH_VAR

#@if FASTBASIC_FP
VAR_FP_LVALUE_SADDR: variable name
        emit { TOK_VAR_SADDR, VT_FLOAT } E_VAR_SEARCH "%"
        ARRAY_FLOAT_ADDR emit TOK_SADDR
#@endif FASTBASIC_FP

# This is a standalone rule to skip spaces before the equal
EQUAL: '='
        "="

# Parse optional "STEP" in for
STEP_OPTIONAL: 'STEP'
        "Step" emit TOK_PUSH EXPR
        emit TOK_PUSH_1

# Parse (optional) variable name in "NEXT"
NEXT_VARNAME:
        E_VAR_WORD
        emit 0

# POSITION arguments, used also in PLOT, DRAWTO, LOCATE and FILLTO
POSITION:
        EXPR C_EXPR emit TOK_POSITION

# SOUND arguments, three possibilities:
#  SOUND voice, freq, distort, vol
#  SOUND voice
#  SOUND
SOUND:
        SOUND_S1 "," EXPR emit TOK_PUSH EXPR_AB \
              emit { TOK_SHL8, TOK_ADD, TOK_DPOKE, TOK_0, TOK_NUM_POKE, &AUDCTL, \
                     TOK_BYTE, 3, TOK_NUM_POKE, &SKCTL }
        SOUND_S1 emit { TOK_0, TOK_DPOKE }
        emit { TOK_NUM, &SOUND_OFF, TOK_USR_ADDR, TOK_USR_CALL }

SOUND_S1:
        EXPR emit { TOK_USHL, TOK_PUSH_NUM, &AUDF1, TOK_ADD, TOK_SADDR }

# Word Arrays
ARRAY_WORD_ADDR:
        emit { TOK_VAR_LOAD, VT_ARRAY_WORD } E_VAR_SEARCH emit TOK_PUSH PAR_EXPR emit { TOK_USHL, TOK_ADD }
        emit { TOK_NUM, VT_ARRAY_WORD } E_LABEL emit TOK_PUSH PAR_EXPR emit { TOK_USHL, TOK_ADD }

# String Arrays
ARRAY_STRING_ADDR:
        emit { TOK_VAR_LOAD, VT_ARRAY_STRING } E_VAR_SEARCH "$" emit TOK_PUSH PAR_EXPR emit { TOK_USHL, TOK_ADD }

# Byte Arrays
ARRAY_BYTE_ADDR: variable name
        emit { TOK_VAR_LOAD, VT_ARRAY_BYTE } E_VAR_SEARCH emit TOK_PUSH PAR_EXPR emit TOK_ADD
        emit { TOK_NUM, VT_ARRAY_BYTE } E_LABEL emit TOK_PUSH PAR_EXPR emit TOK_ADD

#@if FASTBASIC_FP
# Float Arrays
ARRAY_FLOAT_ADDR:
        emit { TOK_VAR_LOAD, VT_ARRAY_FLOAT } E_VAR_SEARCH "%" emit TOK_PUSH PAR_EXPR emit { TOK_MUL6, TOK_ADD }
#@endif FASTBASIC_FP

# DIM
DIM_MORE: comma
        "," DIM_VAR DIM_MORE
        pass

# INPUT
INPUT_STR:
        IO_CHAN emit TOK_IOCHN ","                       # I/O channel, don't print prompt
        "\"" emit TOK_CSTRING E_CONST_STRING emit TOK_PRINT_STR PRINT_SEP # Prints a given string
        PRINT_SEP                                        # If starts with ',' or ';', don't print anyting
        emit { TOK_BYTE, 63, TOK_PUT }                   # Prints a '?' by default

INPUT_VAR_LIST:
        INPUT_VAR INPUT_VAR_MORE

INPUT_VAR_MORE:
        "," INPUT_VAR_LIST
        pass

INPUT_VAR:
        VAR_WORD_LVALUE_SADDR  emit { TOK_INPUT_STR, TOK_VAL, TOK_DPOKE }
        ARRAY_BYTE_ADDR        emit { TOK_SADDR, TOK_INPUT_STR, TOK_VAL, TOK_POKE }
        VAR_STR_LVALUE_SADDR   emit { TOK_INPUT_STR, TOK_COPY_STR }
#@if FASTBASIC_FP
        VAR_FP_LVALUE_SADDR    emit { TOK_INPUT_STR, TOK_FP_VAL, TOK_FP_STORE }
#@endif FASTBASIC_FP

# Optional WORD array type
TYPE_WORD:
        "Word" emit VT_ARRAY_WORD
        emit VT_ARRAY_WORD

# BYTE array type
TYPE_BYTE:
        "Byte" emit VT_ARRAY_BYTE

DIM_VAR_TYPE:
        "$" PAR_EXPR emit { TOK_PUSH_1, TOK_ADD, TOK_USHL, VT_ARRAY_STRING }
#@if FASTBASIC_FP
        "%" PAR_EXPR emit { TOK_PUSH_1, TOK_ADD, TOK_MUL6, VT_ARRAY_FLOAT }
#@endif FASTBASIC_FP
        PAR_EXPR     emit { TOK_PUSH_1, TOK_ADD } TYPE_BYTE
        PAR_EXPR     emit { TOK_PUSH_1, TOK_ADD, TOK_USHL } TYPE_WORD

DIM_VAR: new variable name
        E_VAR_CREATE E_PUSH_VAR DIM_VAR_TYPE E_VAR_SET_TYPE emit TOK_DIM E_POP_VAR

# I/O expressions
IO_CHAN: I/O channel number
        "#" EXPR

IO_CHAN_OPT:
        IO_CHAN emit TOK_IOCHN ","
        pass

# Used only for CLS
IO_CHAN_OPT_NOCOMMA:
        IO_CHAN emit TOK_IOCHN
        pass

# Resets I/O channel to 0
IO_CHAN0:
        emit TOK_0 emit TOK_IOCHN

# Get from keyboard expression
GETK_EXPR:
        ARRAY_BYTE_ADDR        emit { TOK_SADDR, TOK_GETKEY, TOK_POKE }
        VAR_WORD_LVALUE_SADDR  emit { TOK_GETKEY, TOK_DPOKE }

# Get expression
GET_EXPR: comma
        "," ARRAY_BYTE_ADDR        emit { TOK_SADDR, TOK_GET, TOK_POKE } GET_EXPR_MORE
        "," VAR_WORD_LVALUE_SADDR  emit { TOK_GET, TOK_DPOKE } GET_EXPR_MORE

GET_EXPR_MORE:
        GET_EXPR
        IO_CHAN0

# A comma followed by an expression
C_EXPR: comma followed by an expression
        "," emit TOK_PUSH EXPR

# Get two comma separated expressions ",A,B" and returns "A*16+B"
EXPR_AB:
        "," EXPR emit { TOK_USHL, TOK_USHL, TOK_USHL, TOK_USHL } C_EXPR emit TOK_ADD

# Parses a XIO AUX1/AUX2/STRING expression
XIO_EXPR:
        C_EXPR C_EXPR emit { TOK_SHL8, TOK_ADD, TOK_PUSH } "," STR_EXPR emit TOK_XIO

# Parses a "DATA" expression, get's binary data in memory
DATA_WORDS: data word
        "," E_NUMBER_WORD DATA_WORDS
        pass

DATA_BYTE:
        "\"" E_CONST_STRING
        E_NUMBER_BYTE
        emit { VT_ARRAY_BYTE } E_LABEL

DATA_BYTES: data byte
        # To store bytes, simply remove upper part
        DATA_BYTE "," DATA_BYTES
        DATA_BYTE

DATA_TYPE: data type
        TYPE_BYTE EQUAL E_LABEL_SET_TYPE DATA_BYTES
        TYPE_WORD EQUAL E_LABEL_SET_TYPE E_NUMBER_WORD DATA_WORDS
#@if EXTENDED
        TYPE_BYTE "File" E_LABEL_SET_TYPE "\"" E_DATA_FILE
        TYPE_WORD "File" E_LABEL_SET_TYPE "\"" E_DATA_FILE
#@endif

DATA_END:
        ","
        E_POP_PROC_DATA

DATA_VAR: new data array name
        DATA_TYPE
        emit { TOK_JUMP, LT_PROC_DATA } E_PUSH_LT E_LABEL_DEF "()" DATA_TYPE

# DLI support - builds a machine code routine and store the address to
# display list interrupt handler:
DLI_COMMAND: 'SET', label
        # Define a new DLI with given name
        "Set" emit { TOK_JUMP, LT_PROC_DATA } E_PUSH_LT \
              E_LABEL_DEF emit { VT_ARRAY_BYTE } E_LABEL_SET_TYPE \
              emit { 72, 138, 72, 166, COLRSH } EQUAL \
              DLI_LDA emit { 141, &WSYNC } DLI_STA DLI_CODES
        # Continuation of a DLI line
        EQUAL DLI_LDA DLI_STA DLI_CODES
        # Activate DLI with given name
        emit { TOK_NUM, &VDSLST, TOK_SADDR, TOK_NUM, VT_ARRAY_BYTE } E_LABEL \
              emit { TOK_DPOKE, TOK_BYTE, 192, TOK_NUM_POKE, &NMIEN }
        # Clear the DLI
        emit { TOK_BYTE, 64, TOK_NUM_POKE, &NMIEN }

DLI_CODES:
        "," DLI_LDA DLI_STA DLI_CODES
        ","
        emit { 230, COLRSH, 104, 170, 104, 64 } E_POP_PROC_DATA

DLI_LDA: DLI source data
        emit { 189, VT_ARRAY_BYTE } E_LABEL
        emit 169 E_NUMBER_BYTE

DLI_STA: DLI destination
        "Into" emit 141 E_NUMBER_WORD
        "Wsync" emit { 141, &WSYNC } DLI_STA

# Parse a line
PARSE_LINE_COMMAND: statement
        "." E_REM
        "?" PRINT_EXPR
        "PRint" PRINT_EXPR
        "INput" INPUT_STR INPUT_VAR_LIST IO_CHAN0
        "GEt" GETK_EXPR
        "GEt" IO_CHAN emit TOK_IOCHN GET_EXPR
        "PUt" IO_CHAN_OPT EXPR emit TOK_PUT IO_CHAN0
        "CLS" IO_CHAN_OPT_NOCOMMA emit { TOK_BYTE, CLS, TOK_PUT } IO_CHAN0
        "Poke"  EXPR emit TOK_SADDR "," EXPR emit TOK_POKE
        "Dpoke" EXPR emit TOK_SADDR "," EXPR emit TOK_DPOKE
        "MSet"  EXPR C_EXPR C_EXPR emit TOK_MSET
        "Move"  EXPR C_EXPR C_EXPR emit TOK_MOVE
        "-move" EXPR C_EXPR C_EXPR emit TOK_NMOVE
        "DO" E_EOL emit LT_DO_LOOP E_PUSH_LT
        "Loop" E_EOL emit TOK_JUMP E_POP_LOOP
        "Repeat" E_EOL emit LT_REPEAT E_PUSH_LT
        "Until" FORCE_BOOL_EXPR emit TOK_CJUMP E_POP_REPEAT
        "While" emit LT_WHILE_1 E_PUSH_LT FORCE_BOOL_EXPR emit { TOK_CJUMP, LT_WHILE_2 } E_PUSH_LT
        "WEnd" E_EOL emit TOK_JUMP E_POP_WHILE
        "If" FORCE_BOOL_EXPR emit { TOK_CJUMP, LT_IF } E_PUSH_LT THEN_OR_MULTILINE
        "For" VAR_WORD_LVALUE_SADDR EQUAL emit TOK_PUSH EXPR emit TOK_DPOKE \
              "To" EXPR STEP_OPTIONAL \
              emit { TOK_FOR, TOK_CNJUMP, LT_FOR_2 } E_PUSH_LT emit LT_FOR_1 E_PUSH_LT
        "Next" emit TOK_FOR_NEXT emit TOK_CJUMP NEXT_VARNAME E_POP_FOR emit TOK_FOR_EXIT
        "ELse" E_EOL emit TOK_JUMP emit LT_ELSE E_ELSEIF
        "ELIf" emit { TOK_JUMP, LT_ELIF } E_ELSEIF FORCE_BOOL_EXPR emit { TOK_CJUMP, LT_IF } E_PUSH_LT
        "Endif" E_EOL E_POP_IF
        "EXit" emit TOK_JUMP E_EXIT_LOOP
        "Graphics" emit { TOK_0, TOK_PMGRAPHICS, TOK_BYTE, 6, TOK_CLOSE } EXPR emit TOK_GRAPHICS
        "Color"  EXPR emit { TOK_BYTE_POKE, COLOR }
        "FColor" EXPR emit { TOK_NUM_POKE, &FILDAT }
        "POSition" POSITION
        "LOCate" POSITION emit { TOK_BYTE, 6, TOK_IOCHN } GET_EXPR
        "PLot" POSITION emit { TOK_BYTE, 6, TOK_IOCHN, TOK_BYTE_PEEK, COLOR, TOK_PUT } IO_CHAN0
        "DRawto" POSITION emit { TOK_BYTE, DRAWLN, TOK_DRAWTO }
        "FIllto" POSITION emit { TOK_BYTE, FILLIN, TOK_DRAWTO }
        "SEtcolor" EXPR emit { TOK_PUSH_NUM, &COLOR0, TOK_ADD, TOK_SADDR } EXPR_AB emit TOK_POKE
        "Sound" SOUND
        "DIm" DIM_VAR DIM_MORE
        "CLose" IO_CHAN emit TOK_CLOSE
        "Open" IO_CHAN emit { TOK_PUSH_BYTE, OPEN } XIO_EXPR
        "Xio"  IO_CHAN C_EXPR XIO_EXPR
        "BPut" IO_CHAN C_EXPR C_EXPR emit TOK_BPUT
        "BGet" IO_CHAN C_EXPR C_EXPR emit TOK_BGET
        "PAuse" EXPR emit TOK_PAUSE
        "INC" VAR_WORD_LVALUE_SADDR emit TOK_INC
        "DEc" VAR_WORD_LVALUE_SADDR emit TOK_DEC
        "PROc" emit { TOK_JUMP, LT_PROC_DATA } E_PUSH_LT E_LABEL_DEF emit LT_PROC_2 E_PUSH_LT
        "ENDProc" E_POP_PROC_2 emit TOK_RET E_POP_PROC_DATA
        "EXEc" emit { TOK_CALL, VT_UNDEF } E_LABEL
        "DAta" DATA_VAR DATA_END
        "END" emit TOK_END
#@if FASTBASIC_FP
        "DEG" emit { TOK_1, TOK_BYTE_POKE, DEGFLAG }
        "RAd" emit { TOK_0, TOK_BYTE_POKE, DEGFLAG }
#@endif FASTBASIC_FP
        "PMGraphics" EXPR emit TOK_PMGRAPHICS
        "PMhpos"  EXPR emit { TOK_PUSH_NUM, &HPOSP0, TOK_ADD, TOK_SADDR } "," EXPR emit TOK_POKE
        "Timer" emit { TOK_0, TOK_BYTE_POKE, 20, TOK_0, TOK_BYTE_POKE, 19 }
        "DLi" DLI_COMMAND
        "CLR" emit { TOK_NUM, &CLEAR_DATA, TOK_USR_ADDR, TOK_USR_CALL }

PARSE_LINE_ASSIGN:
        VAR_WORD_SAVE                  EQUAL EXPR emit TOK_VAR_STORE E_POP_VAR
        VAR_WORD_LVALUE_SADDR          EQUAL EXPR emit TOK_DPOKE
        ARRAY_BYTE_ADDR emit TOK_SADDR EQUAL EXPR emit TOK_POKE
        VAR_STR_LVALUE_SADDR           EQUAL STR_EXPR emit TOK_COPY_STR
        VAR_STR_LVALUE_SADDR           EQUAL "+" STR_EXPR emit TOK_CAT_STR
#@if FASTBASIC_FP
        VAR_FP_LVALUE_SADDR EQUAL FP_EXPR emit TOK_FP_STORE
#@endif FASTBASIC_FP

PARSE_START:
        E_EOL
        PARSE_LINE_COMMAND E_EOL
        PARSE_LINE_ASSIGN E_EOL

# vi:syntax=perl
