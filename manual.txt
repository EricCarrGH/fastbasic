FastBasic - by DMSC
-------------------

All statements and variable names can be lower or uppercase,
the parser is case insensitive.

No line numbers are allowed.

Supported integer operators, in order of precedence:
 +  -           : addition, subtraction
 *  /  MOD      : multiplication, division, modulus
 &  !  EXOR     : binary AND, OR and EXOR
 +  -           : unary "+" and "-"

Supported functions:
 TIME           : time in jiffies
 ABS(N)
 SGN(N)
 PEEK(N)
 PADDLE(N)
 PTRIG(N)
 STICK(N)
 STRIG(N)
 RAND(N)        : random from 0 to N
 DPEEK(N)
 FRE()          : free memory
 ERR()          : last I/O error
 ADR(array)     : address of array in memory
 ADR(string)
 LEN(string)
 VAL(string)
 ASC(string)
 USR(address[,N1 ...])

Supported boolean operators, in order of precedence:
 OR     : Logical OR
 AND    : Logical AND
 NOT    : Logical NOT
 <= >= <> <  >  =       : Integer comparison

Strings:
 String variables don't need DIM, are of max 255 bytes length.
 String constants can have embedded " by duplicating (" my string ""hello"" ")

Arrays:
 Arrays must be DIM before use.
 After array name, you can specify "WORD" or "BYTE" to give a type.
    DIM Array1(10) Word, SmallArray(32) Byte

Variables:
 Variables are always INT (from -32768 to 32767), must be assigned before use.

Statements:
 '              : Comment (REM)
 .              : Comment (REM)
 ?              : PRINT
 BGET #
 BPUT #
 CLOSE #
 COLOR
 DATA
 DIM
 DO / LOOP
 DPOKE
 DRAWTO
 END            : Terminates parsing, go to command mode
 EXEC
 EXIT           : Exits from DO, REPEAT, WHILE, FOR or PROC
 FILLTO
 FOR / TO / NEXT
 FOR / TO / STEP / NEXT
 GET            : Get from Keyboard
 GET #
 GRAPHICS
 IF / ELIF / ELSE / ENDIF
 IF / THEN
 INC
 INPUT
 MOVE / -MOVE
 OPEN #
 PAUSE
 PLOT
 POKE
 POSITION
 PRINT
 PROC / ENDPROC
 PUT            : Put to E:
 PUT #
 REPEAT / UNTIL
 SETCOLOR
 SOUND          : With no parameters silences all sounds.
 WHILE / WEND
 XIO #


Data Statements:
 Data statements create an array with the numeric data:

  DATA var() word = 123, 467, $1234

 You must specify the type (word or byte). If the DATA statement
 ends in a comma, you must continue in the next line with the
 same type:

  DATA big() byte = $12,$23,$45,$00,$15,
  DATA       byte = $08,$09,$15

USR Function:
 This calls M/L routines, passing parameters in the CPU stack. The value
 returned is the value in the A/X registers (A = low part, X = high part)

 This is a sample usage:
   ' PLA / EOR $FF / TAX / PLA / EOR $FF / RTS
   DATA ml() byte = $68,$49,$FF,$AA,$68,$49,$FF,$60
   FOR i=0 TO 1000 STEP 100
    ? i, USR(ADR(ml),i)
   NEXT i

IF Statements:
 The general form of IF statements is:

   IF condition_1
     ' Perform if condition 1 is true
   ELIF condition_2
     ' Perform if condition_1 is false and condition 2 is true
   ELIF condition_3
     ' Also, if condition 1 and 2 are false and condition 3 is true
   ELSE
     ' Perform if all of the above are false
   ENDIF

PROC Statements:
 PROC defines a subroutine, called with "EXEC". You can return
 early from a subroutine with "EXIT".

 PROCs can be defined befor or after usage, it's recommended to
 write them at the end of the program to allow use of variables
 defined in the main program.

 Example:

   x = 7524
   EXEC Sqrt
   x = -7
   EXEC Sqrt

   PROC Sqrt
     if x < 0
       ? "Needs x positive"
       exit
     endif
     ? "Square Root of "; x;
     y = 0
     while x > 0
       inc y
       x = x - y - y - 1
     wend
     ? " is "; y
   ENDPROC

